'use strict';

const redux = require('redux');
const _ = require('underscore');
const setting = require('chqportal').setting;
let dataBoard = setting.get("ui:dashBoard") || [{
	id: "default",
	name: "DEFAULT",
	shortcuts: []
}];

let storeBoard = redux.createStore(reduceBoard, {
	data: dataBoard
});


storeBoard.subscribe(storeBoardChange);

function storeBoardChange() {
	init();
}

function init() {
	htmlInit();
	eventInit();
}

function htmlInit() {
	var dataBoard = storeBoard.getState().data;
	htmlBoard(dataBoard);
}

function htmlBoard(boards) {
	let boardsStr = "";
	for (let i = 0; i < boards.length; i++) {
		let board = boards[i];
		boardsStr += getBoardStr(board);
	}
	$(".card.board").remove();
	$("<div>").html(boardsStr).appendTo('#dashboard');
}

function eventInit() {
	let boards = $(".card.board");
	boards.off('dragover').on('dragover', function(e) {
		e.preventDefault();
	})
	boards.off('drop').on('drop', function(e) {
		e.preventDefault();
		let dataTransfer = e.originalEvent.dataTransfer;
		drapFileHandle(dataTransfer, $(this).attr("id"));
		drapTextHandle(dataTransfer, $(this).attr("id"));
		drapOtherHandle(dataTransfer, $(this).attr("id"));
	});
	boards.off('mouseup').on('mouseup', function(e) {
		if(!$(e.target).is(".board"))return ;
		if (e.button == 2) {
			let boardId = $(this).data("id");
			_confirm("Do you confirm to delete this board?", function() {
				storeBoard.dispatch({
					type: "DelBoard",
					boardId: boardId
				});
			})
		}
	})
	let shortcuts = $(".shortcut");
	shortcuts.off('click').on('click', function(e) {
		let path = $(this).data('path');
		require('electron').shell.openItem(path);
	})
	shortcuts.off('dragstart').on('dragstart', function(e) {
		let dataTransfer = e.originalEvent.dataTransfer;
		let id = $(this).data("id");
		let boardId = $(this).parent(".board").data("id");
		dataTransfer.setData("json",JSON.stringify({type:"ShortcutChangeBoard",shortcutId:id,boardId:boardId}));
	})
	shortcuts.off('dragend').on('dragend', function(e) {
		let dataTransfer = e.originalEvent.dataTransfer;
	})
	shortcuts.off('mouseup').on('mouseup', function(e) {
		if(!$(this).is(".shortcut"))return ;
		if (e.button == 2) {
			let id = $(this).data("id");
			let boardId = $(this).parent('.board').data("id");
			_confirm("Do you confirm to delete this shortcut?", function() {
				storeBoard.dispatch({
					type: "DelShortcut",
					boardId: boardId,
					shortcutId: id
				});
			})
		}
	})
	let boardName = $(".board [name=boardName]");
	boardName.off('blur').on('blur', function(e) {
		let name = $(this).val();
		let id = $(this).parent('.board').data('id')
		storeBoard.dispatch({
			type: "ChangeBoardName",
			boardId: id,
			boardName: name
		});
	});
	let dashboard = $("#dashboard");
	dashboard.off('dblclick').on('dblclick', function(e) {
		if(!$(e.target).is("#dashboard"))return ;
		_confirm("Do you confirm to add a new board?", function() {
			storeBoard.dispatch({
				type: "AddBoard",
				boardId: uniqueId(),
				boardName: "DEFAULT"
			});
		})
	});
}


function reduceBoard(state, action) {
	let newState = Object.assign({}, state);
	let type = action.type;
	switch (type) {
		case 'AddShortcut':
			reduceAddShortcut(newState, action);
			break;
		case 'DelShortcut':
			reduceDelShortcut(newState, action);
			break;
		case 'ChangeBoardName':
			reduceChangeBoardName(newState, action);
			break;
		case 'AddBoard':
			reduceAddBoard(newState, action);
			break;
		case 'DelBoard':
			reduceDelBoard(newState, action);
			break;
		case 'ShortcutChangeBoard':
			reduceShortcutChangeBoard(newState, action);
			break;
		default: 
			break;
	}
	if (state) {
		// console.log('reduce', 'action', action);
		// console.log('reduce', 'old state', state);
		// console.log('reduce', 'new state', newState);
	}
	console.log('old',state,'new',newState);
	setting.set("ui:dashBoard", newState.data);
	return newState; 
}

function reduceShortcutChangeBoard(state, action) {
	let dataBoard = state.data;
	let boardId = action.boardId +"";
	let newBoardId = action.newBoardId +"";
	let shortcutId = action.shortcutId +"";
	let board = _.find(dataBoard, {
		id: boardId
	});
	let newBoard = _.find(dataBoard, {
		id: newBoardId
	});
	console.log(newBoardId,newBoard,dataBoard);
	let shortcut = _.find(board.shortcuts, {
		id: shortcutId
	});
	if (board) {
		let shortcuts = board.shortcuts || [];
		let newShortcuts = _.filter(shortcuts, function(value) {
			return value.id != shortcutId;
		});
		board.shortcuts = newShortcuts;
	}
	newBoard.shortcuts.push(shortcut);
}

function reduceDelBoard(state, action) {
	let dataBoard = state.data;
	let boardId = action.boardId;
	
	state.data = _.filter(dataBoard, function(value) {
		return value.id != boardId;
	});

}

function reduceAddBoard(state, action) {
	let dataBoard = state.data;
	let boardId = action.boardId;
	let boardName = action.boardName;
	dataBoard.push({
		id: boardId,
		name: boardName,
		shortcuts: []
	});
}

function reduceChangeBoardName(state, action) {
	let dataBoard = state.data;
	let boardId = action.boardId+"";
	let boardName = action.boardName || "DEFAULT";
	let board = _.find(dataBoard, {
		id: boardId
	});

	if (board) {
		board.name = boardName;
	}

}

function reduceAddShortcut(state, action) {
	let dataBoard = state.data;
	let boardId = action.boardId;
	let board = _.find(dataBoard, {
		id: boardId
	});
	let shortcutId = action.shortcutId;
	let shortcutName = action.shortcutName;
	let shortcutPath = action.shortcutPath;
	if (board) {
		let shortcuts = board.shortcuts || [];
		shortcuts.push({
			id: shortcutId,
			name: shortcutName,
			path: shortcutPath 
		});
	}
}

function reduceDelShortcut(state, action) {
	let dataBoard = state.data;
	let boardId = action.boardId +"";
	let board = _.find(dataBoard, {
		id: boardId
	});
	let shortcutId = action.shortcutId;
	if (board) {
		let shortcuts = board.shortcuts || [];
		let newShortcuts = _.filter(shortcuts, function(value) {
			return value.id != shortcutId;
		});
		board.shortcuts = newShortcuts;
	}

}



function getBoardStr(json) {
	if (json == null) return "";
	let name = json.name || "DEFAULT";
	let id = json.id || "dashBoard";
	let shortcuts = json.shortcuts || [];
	var shortcutsStr = "";
	for (let i = 0; i < shortcuts.length; i++) {
		shortcutsStr += getShortcutStr(shortcuts[i]);
	}
	return `
	<div id="${id}" data-id="${id}" class="card board" z=3>
	<input type="text" name="boardName" class="text-input" value="${name}" placeholder="Change Name" /><br/>
		${shortcutsStr}
	</div>
	`;
}

function getShortcutStr(json) {
	if (json == null) return "";
	let name = json.name || "dashBoard";
	let path = json.path || "";
	let id = json.id || "";
	return `
	<div draggable="true" data-path="${path}" data-id="${id}" class="${shortcutClass(name)} shortcut card ripple" z=2>
		<div class="shortcut-icon"><i class="${shortcutIcon(name)}"></i></div>
		<div class="shortcut-title">${shortcutName(name)}</div>	
	</div>
	`;
}

function shortcutClass(shortcutName) {
	let name = shortcutName.toLowerCase();
	if(name.indexOf(".one")!=-1)return "bg-pink-a200 color-white";
	if(name.indexOf(".exe")!=-1)return "bg-teal-500 color-white";
	if(name.indexOf(".zip")!=-1)return "bg-brown-500 color-white";
	if(name.indexOf(".rar")!=-1)return "bg-brown-500 color-white";
	if(name.indexOf(".7z")!=-1)return "bg-brown-500 color-white";
	if(name.indexOf(".xls")!=-1)return "bg-green-500 color-white";
	if(name.indexOf(".doc")!=-1)return "bg-blue-500 color-white";
	if(name.indexOf(".chm")!=-1)return "bg-orange-a100 color-black";
	if(name.indexOf(".pdf")!=-1)return "bg-red-900 color-white";
	if(name.indexOf(".ppt")!=-1)return "bg-deep-orange-400 color-white";
	if(name.indexOf(".html")!=-1)return "bg-deep-purple-500 color-white";
	if(name.indexOf(".js")!=-1)return "bg-deep-purple-500 color-white";
	if(name.indexOf(".txt")!=-1)return "bg-deep-purple-500 color-white";
	if(name.indexOf(".lnk")!=-1)return "bg-pink-300 color-white";
	if(name.indexOf(".mm")!=-1)return "bg-red-a200 color-white";
	if(name.indexOf(".")==-1)return "bg-yellow-200 color-black";
	return "bg-blue-grey-500 color-white";
}

function shortcutName(shortcutName) {
	let name = shortcutName.toLowerCase();
	if(name.indexOf(".lnk")!=-1)return shortcutName.replace(/\.lnk$/i,"");
	return name;
}

function shortcutIcon(shortcutName) {
	let name = shortcutName.toLowerCase();
	if(name.indexOf(".one")!=-1)return "icon-book";
	if(name.indexOf(".rar")!=-1)return "icon-drive-zip";
	if(name.indexOf(".zip")!=-1)return "icon-drive-zip";
	if(name.indexOf(".7z")!=-1)return "icon-drive-zip";
	if(name.indexOf(".html")!=-1)return "icon-drive-document";
	if(name.indexOf(".js")!=-1)return "icon-drive-document";
	if(name.indexOf(".txt")!=-1)return "icon-drive-document";
	if(name.indexOf(".log")!=-1)return "icon-drive-document";
	if(name.indexOf(".pdf")!=-1)return "icon-drive-pdf";
	if(name.indexOf(".png")!=-1)return "icon-drive-image";
	if(name.indexOf(".jpg")!=-1)return "icon-drive-image";
	if(name.indexOf(".chm")!=-1)return "icon-drive-document";
	if(name.indexOf(".xls")!=-1)return "icon-drive-ms-excel";
	if(name.indexOf(".doc")!=-1)return "icon-drive-ms-word";
	if(name.indexOf(".ppt")!=-1)return "icon-drive-ms-powerpoint";
	if(name.indexOf(".exe")!=-1)return "icon-view-carousel";
	if(name.indexOf(".mm")!=-1)return "icon-drive-drawing";
	if(name.indexOf(".lnk")!=-1)return "icon-drive-document";
	if(name.indexOf(".")==-1)return "icon-folder";
	return "icon-bookmark";
}

function uniqueId() {
	return new Date().getTime() + _.uniqueId();
}

function drapFileHandle(dataTransfer, id) {
	let files = dataTransfer.files;
	if (files != 0 && files.length > 0) {
		for (let i = 0; i < files.length; i++) {
			let file = files[i];
			let name = file.name;
			let path = file.path;
			let shortcutId = uniqueId();
			storeBoard.dispatch({
				type: "AddShortcut",
				boardId: id,
				shortcutId: shortcutId,
				shortcutName: name,
				shortcutPath: path
			});
		}
	}
}

function drapTextHandle(dataTransfer,id) {
	let items = dataTransfer.items;
	if (items != 0 && items.length > 0) {
		for (let i = 0; i < items.length; i++) {
			let item = items[i];
			let kind = item.kind;
			let type = item.type;
			if (item.kind == "string") {
				console.log(item);
				var str = dataTransfer.getData(type)
				console.log(str);
				if(type=="json")
				{
					let data = JSON.parse(dataTransfer.getData(type));
					data.newBoardId = id;
					storeBoard.dispatch(data);
				}
			}
		}
	}
}

function drapOtherHandle(dataTransfer) {
	let items = dataTransfer.items;
	if (items != 0 && items.length > 0) {
		for (let i = 0; i < items.length; i++) {
			let item = items[i];
			let kind = item.kind;
			let type = item.type;
			if (kind != "string" && kind != "file") {
				console.log(type, dataTransfer.getData(type));
			}
		}
	}
}

module.exports.init = init;